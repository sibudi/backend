
import com.yqg.drools.utils.RuleUtils;
import com.yqg.common.enums.order.BlackListTypeEnum;
import com.yqg.drools.model.base.RuleThresholdValues;
import com.yqg.drools.model.base.RuleConditionModel;
import com.yqg.drools.model.RUserInfo;
import com.yqg.drools.model.DeviceModel;
import com.yqg.drools.model.RUserInfo.SexEnum;
import com.yqg.drools.model.RUserInfo.EducationEnum;
import com.yqg.drools.model.ShortMessage;
import com.yqg.drools.model.UserCallRecordsModel;
import com.yqg.common.utils.StringUtils;
import com.yqg.drools.model.InstalledAppInfo;
import com.yqg.drools.model.GojekModel;
import com.yqg.drools.model.LoanInfo;
import com.yqg.drools.model.LastLoan;
import com.yqg.drools.model.FaceBookModel;
import com.yqg.drools.model.ContactInfo;
import com.yqg.drools.model.ModelScoreResult;
import java.util.List;
import java.util.Arrays;


global  List ruleSetResultList;



rule "REBORROW_COMBINATION_010_A"
  salience($thresholdValues.getRuleOrder(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()))
when
  RuleConditionModel(isSuitableForRule(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()));
  $thresholdValues:RuleThresholdValues($threshData:thresholdMap[BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()]);
  LoanInfo($currentBorrowCount: currentBorrowCount,$currentBorrowingAmount: borrowingAmount);
  LastLoan($overdueDays: overdueDays,$lastLoanBorrowingAmount: borrowingAmount);
  eval(RuleUtils.equalTo(RuleUtils.valueOfStr($lastLoanBorrowingAmount),RuleUtils.getRuleParam($threshData,0))
       && RuleUtils.equalTo(RuleUtils.valueOfStr($currentBorrowingAmount),RuleUtils.getRuleParam($threshData,1))
       && RuleUtils.greatThan(RuleUtils.valueOfStr($overdueDays),RuleUtils.getRuleParam($threshData,2))
       && RuleUtils.greatOrEqualThan(RuleUtils.valueOfStr($currentBorrowCount),RuleUtils.getRuleParam($threshData,3))
       );
then
   RuleUtils.buildHitRuleResult(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage(),
                               "true",
                               "hit last_loan_amount&current_loan_amount&last_loan_overdue_borrowing_count")
                               .addToResultList(ruleSetResultList);
end


rule "REBORROW_COMBINATION_010_B"
  salience($thresholdValues.getRuleOrder(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()))
when
  RuleConditionModel(isSuitableForRule(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()));
  $thresholdValues:RuleThresholdValues($threshData:thresholdMap[BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage()]);
  LoanInfo($currentBorrowCount: currentBorrowCount,$currentBorrowingAmount: borrowingAmount);
  LastLoan($overdueDays: overdueDays,$lastLoanBorrowingAmount: borrowingAmount);
  eval(!(RuleUtils.equalTo(RuleUtils.valueOfStr($lastLoanBorrowingAmount),RuleUtils.getRuleParam($threshData,0))
       && RuleUtils.equalTo(RuleUtils.valueOfStr($currentBorrowingAmount),RuleUtils.getRuleParam($threshData,1))
       && RuleUtils.greatThan(RuleUtils.valueOfStr($overdueDays),RuleUtils.getRuleParam($threshData,2))
       && RuleUtils.greatOrEqualThan(RuleUtils.valueOfStr($currentBorrowCount),RuleUtils.getRuleParam($threshData,3))
       ));
then
   RuleUtils.buildUnHitRuleResult(BlackListTypeEnum.MULTI_LAST_LOAN_AMOUNT_OVERDUE_CURRENT_AMOUNT_BORROWING_COUNT.getMessage(),
                               "false",
                               "not hit last_loan_amount&current_loan_amount&last_loan_overdue_borrowing_count")
                               .addToResultList(ruleSetResultList);
end
